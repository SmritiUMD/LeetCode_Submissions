/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(k==0) return head;
        if(head==NULL) return NULL;
        int len=0;
        ListNode* curr=head;
        while(curr!=NULL){
            len++;
            curr=curr->next;
        }
        k=k%len;  /// to prevent unnecessary rotations(this is the key)
        int counter=0;
        curr=head;
        while(curr!=NULL && counter<len-(k+1)){ first set your counter to k'th node from last and set it as current element.
            curr=curr->next;
            counter++;
        }
        if(curr==NULL) return head;
        
        ListNode* k_node=curr;
        while(curr->next){  /iterate after kth node till the last 
            curr=curr->next;
        }
        curr->next=head; //replace the last_elements->next to head
        head=k_node->next;// head will be replaced by the next element of kth element
        k_node->next=NULL;//set the kth_node's next element to NULL (terminate the list)
         return head;
        
    }
};
