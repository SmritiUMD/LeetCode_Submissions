/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    void preOrder(TreeNode* root, int &maxDepth, int depth, int &sum){
        if(!root) return ;
        if(depth>maxDepth){
            sum=root->val;
            maxDepth=depth;
        }
        else if(depth==maxDepth)
            sum+=root->val;
        preOrder(root->left, maxDepth, depth+1, sum);
        preOrder(root->right, maxDepth, depth+1, sum);
    }
public:
    int deepestLeavesSum(TreeNode* root) {
        int sum=0;
        int maxDepth=0;
        int depth=0;
        if(!root) return 0;
        preOrder(root, maxDepth, depth, sum);
        return sum;
    }
};
