//recursive solution
// class Solution {
// public:
//     bool divisorGame(int N) {
//         bool win=false;
//         if(N==0) return false;
//         int counter=0;
//         for(int i=1;i<N;i++){
//             if(N%i==0) return !divisorGame(N-i);
//         }
//        return false;
//     }
// };
        
        ///Bottom up approach
        
// bool t[N+1];
// for(int i=0;i<=N;i++) t[i]=false;
// for(int i=1;i<=N;i++){
//     if(i==1) t[i]= false;
//     else if(i==2) t[i]= true;
//     else 
//         for(int j=1;j*j<i;j++){
//             if(i%j==0){
//                 t[i]=!t[i-j];
//                 cout<<t[i];
//                 break;
//             }
//         }
    
// }
//         return t[N];
//     }
// };
        
        
        //top down approach
bool t[439473];   
class Solution {
public:
    bool divisorGame(int N) {
        if(N==1){
        t[N]=false;
        return false;
    }
    if(N==2){
        t[N]=true;
        return true;
    }

    if(t[N]!=false) return t[N];
    for(int j=1;j*j<=N;j++){
        if(N%j==0){
            t[N]=(!divisorGame[N-j]);
            return t[N];
        }
    }
     return false;
        }
};
        
        
        
        
        
        
        
        
        
        
        
        
        
