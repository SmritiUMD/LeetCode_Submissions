we need to find every island, which we can do using a straightforward depth-first search. The hard part is deciding whether two islands are the same.

Since two islands are the same if one can be translated to match another, let's translate every island so the top-left corner is (0, 0) For example,
if an island is made from squares [(2, 3), (2, 4), (3, 4)], we can think of this shape as [(0, 0), (0, 1), (1, 1)] when anchored at the top-left corner.

From there, we only need to check how many unique shapes there ignoring permutations (so [(0, 0), (0, 1)] is the same as [(0, 1), (1, 0)]).
We use sets directly as we have showcased below, but we could have also sorted each list and put those sorted lists in our set structure shapes.




class Solution {
    vector<vector<bool>>visited;
    set<string>shape;
private:
    void explore(int r, int c, int r0, int c0,vector<vector<int>>& grid, string &s ){
        if(0>r || r>=grid.size() || 0>c || c>=grid[0].size() || !grid[r][c] ) return;
           
            grid[r][c]=0;
            s+=to_string(r-r0)+to_string(c-c0);  //storing the normalized shape in the form of string
            explore(r+1,c,r0,c0,grid,s);
            explore(r,c+1,r0,c0, grid,s);
            explore(r,c-1,r0,c0, grid,s);
            explore(r-1,c,r0,c0, grid,s);
        /// s string will have shape of one island
    }
public:
    int numDistinctIslands(vector<vector<int>>& grid) {
        int H=grid.size();
        int W=grid[0].size();
        vector<vector<bool>>visited(H,(vector<bool>(W)));
        set<set<int>>shapes;
        for(int r=0;r<H;r++){
            for(int c=0;c<W;c++){
                if(grid[r][c]){
                string temp="";/// for every island we will pass this through explore, it will give a unique path
                explore(r,c,r,c, grid, temp);
                shape.insert(temp);
                }
            }
        }
        return shape.size();
        
    }
};
