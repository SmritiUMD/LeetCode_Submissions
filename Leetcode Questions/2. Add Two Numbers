/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        unsigned int sum=0;
        
        ListNode* dummy= new ListNode();
        ListNode* tail =dummy;
        while(l1 || l2 || sum){
            sum+=(l1? l1->val:0)+(l2? l2->val:0);
            tail->next=new ListNode(sum%10);
            sum/=10;
            l1? l1=l1->next:nullptr;
            l2?l2=l2->next:nullptr;
            tail=tail->next;
        }
            
            
           
        
          
       return dummy->next; 
    }
};

///**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int length=0;
         ListNode* dummy= new ListNode(); 
         ListNode* tail=dummy;
        
        
        int sum=0;
        int carry=0;
        while(l1 || l2 ){
          int add=(l1 ? l1->val :0) + (l2 ? l2->val:0)+carry;
          sum=add%10;
           carry=add/10;
           dummy->next= new ListNode(sum);
           l1?l1=l1->next:nullptr;
           l2?l2=l2->next:nullptr;
           dummy=dummy->next;
        }
        //to add the remaining carry
        if (carry) 
             dummy->next= new ListNode(carry);
        
    
      return tail->next;  
        
    }
};
