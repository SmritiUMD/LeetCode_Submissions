///Recursive 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* curr= head;
        for(int i=0; i<k;i++){
            if(curr==NULL) return head;
            curr=curr->next;
        }
        
        int counter=0;
        curr=head;
        ListNode* prev=NULL;
        ListNode* next =NULL;
       for(int i=0;i<k;i++){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        if(next!=NULL){
            head->next=reverseKGroup(next,k);
        }
        
        return prev;
    }
};
////Iterative solution
 ListNode* dummy=new ListNode(0);
        dummy->next=head;
        ListNode* before =dummy;
        ListNode* after=head;
        ListNode* curr=NULL;
        ListNode* prev=NULL;
        ListNode* next=NULL;
        
        
        while(true){
         ListNode* cursor=after;
        
        for(int i=0;i<k;i++){
            if(cursor==NULL) return dummy->next;
            cursor=cursor->next;
        }
        curr=after;
        prev=before;
        
        for(int i=0;i<k;i++){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
            
        }
        after->next=curr;
        before->next=prev;
        before=after;
        after=curr;
        }
        return dummy;
        
    }
};
