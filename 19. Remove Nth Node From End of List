/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int len=0;
        ListNode* temp; 
        if(head->next==NULL) return NULL;
        
        ListNode* first= head;//fast pointer
        ListNode* second=head;//slow pointer
        move fast pointer so that gap between slow and fast pointer in equal to n so that 
        //when slow pointer reaches end slow pointer points to the element to be removed.
        for(int i=0;i<n;i++){
            first=first->next;
        }
        while(!first){
            temp=head->next;
            delete(head);
            return temp;
        }
        while(first->next){
            first=first->next;
            second=second->next;
        }
        temp=second->next->next;
        delete(second->next);
        second->next=temp;
        
        
      
        return head;
    }
};


    Time complexity : O(L)O(L)O(L).

    The algorithm makes one traversal of the list of LLL nodes. Therefore time complexity is O(L)O(L)O(L).

    Space complexity : O(1)O(1)O(1).

    We only used constant extra space.

