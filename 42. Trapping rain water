class Solution {
public:
    int trap(vector<int>& height) {
       
//         int ans=0;
//         for(int i=0;i<height.size();i++){
//              int right_max=0;
//             int left_max=0;
//             for(int j=i;i>0;i--){
//                 left_max=max(left_max,height[j]);
//             }
//             for(int k=i;k<height.size();k++){
//                 right_max=max(height[k],right_max);
//             }
        
//             ans+= min(left_max,right_max)-height[i];
//             }
//         return ans;


??dynamic programming. instead of itereating again and again over left and right side of current element
?? we will store the max values from left and right.
        if(height.size()==0) return 0;
        int ans=0;
        int size=height.size();
        vector<int>left_max(size), right_max(size);
        left_max[0]=height[0];
        for(int i=1;i<height.size();i++){
            left_max[i]=max(height[i],left_max[i-1]);
        }
        right_max[size-1]=height[size-1];
        for(int i=size-2;i>=0;i--){
            right_max[i]=max(height[i],right_max[i+1]);
        }
        for(int i=1;i<size-1;i++){
            ans+=min(left_max[i],right_max[i])-height[i];
        }
        
        
       return ans; 
        
        
    }
};
