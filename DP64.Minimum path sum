class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        ///create a dp array to store the minimus path sum to reach every point
        int dp[m][n];
        //initialize all the values to zero
        for(int i=0;i<m;i++){
            for (int j=0;j<n;j++){
                dp[i][j]=0;
            }
        }
        
        for(int i=0;i<m;i++){
            for(int j=0;j<grid[i].size();j++){
                //add all the grid elements to dp array
                dp[i][j]+=grid[i][j];
                //for the positions other than first row or first column we need to add minimum of two paths (from left
                //or from up)
                if(i>0 &&j>0){
                    dp[i][j]+= min(dp[i-1][j], dp[i][j-1]);
                }
                //first row -add pathsum from left side
                else if(i>0){
                    dp[i][j]+=dp[i-1][j];
                }
                //first column - add path sum from right side
                else if(j>0){
                    dp[i][j]+=dp[i][j-1];
                }
            }
        }
       int x =  sizeof dp / sizeof dp[0]; // 2 rows  
        int y = sizeof dp[0] / sizeof(int); // 5 cols
       return dp[x-1][y-1];
    }
};
