#Recursion


class Solution {
    vector<vector<int>>levels;
   
    public:
     void helper(TreeNode* node, int level,vector<vector<int>>&levels){
         if(node){
             // cout<<node->val;
         if (level == levels.size()){
             levels.push_back({node->val});
         }
         else levels[level].push_back(node->val);
        helper(node->left, level+1,levels);
         helper(node->right, level+1,levels);
         }
     }
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>levels;
        int level =0;
            
        if(!root) return levels;
        helper(root,0,levels);
        return levels;
        
    }
};

##BFS
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*>q;
        vector<vector<int>>result;
        q.push(root);
        if(!root) return result;
        while(!q.empty()){
            int size = q.size();
            vector<int> temp;
            for(int i=0; i<size;i++){
                auto t = q.front();
                if(t->left) q.push(t->left);
                if(t->right) q.push(t->right);
                q.pop();
                temp.push_back(t->val);
            }
            result.push_back(temp);
        }
        return result;
        
    }
};
